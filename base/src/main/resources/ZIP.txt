/*
import java.io.BufferedInputStream;
        import java.io.BufferedOutputStream;
        import java.io.File;
        import java.io.FileInputStream;
        import java.io.FileNotFoundException;
        import java.io.FileOutputStream;
        import java.io.IOException;
        import java.util.Enumeration;
        import java.util.zip.CRC32;
        import java.util.zip.CheckedInputStream;
        import java.util.zip.CheckedOutputStream;
        import java.util.zip.Deflater;
        import java.util.zip.ZipException;
        import java.util.zip.ZipInputStream;

        import org.apache.tools.zip.ZipEntry;
        import org.apache.tools.zip.ZipFile;
        import org.apache.tools.zip.ZipOutputStream;

*/
/**
 *
 * Обеспечение сжатия для отдельных файлов и каталогов, а также поддержка необходимости создания сжатых исходных каталогов, китайских путей
 *
 * @author jzj
 *//*

public class ZipCompress {

    private static boolean isCreateSrcDir = true; // Создавать ли исходный каталог

    */
/**
     * @param args
     * @throws IOException
     *//*

    public static void main(String[] args) throws IOException {
        String src = "m: / New text document.txt"; // Укажите источник сжатия, который может быть каталогом или файлом
        String depressDir = "e: / tmp / depress"; // путь распаковки
        String archive = "e: /tmp/test.zip"; // zip-путь
        String comment = "Java Zip test."; // Сжатие комментария

        // ---- сжатые файлы или каталоги
        writeByApacheZipOutputStream(src, archive, comment);

        */
/*
         * Прочитайте сжатый файл и закомментируйте его, потому что используется сжатый класс apache, поэтому используйте библиотеку классов java
         * Произошла ошибка при распаковке класса, он не может быть запущен здесь
         *//*

        //readByZipInputStream();
        // ---- используем apace ZipFile для чтения сжатого файла
        readByApacheZipFile(archive, decompressDir);
    }

    public static void writeByApacheZipOutputStream(String src, String archive,
                                                    String comment) throws FileNotFoundException, IOException {
        // ---- сжатый файл:
        FileOutputStream f = new FileOutputStream(archive);
        // Создать выходной поток с указанной контрольной суммой
        CheckedOutputStream csum = new CheckedOutputStream(f, new CRC32());

        ZipOutputStream zos = new ZipOutputStream(csum);
        // Поддержка китайского
        zos.setEncoding("GBK");
        BufferedOutputStream out = new BufferedOutputStream(zos);
        // Установить комментарий архива
        zos.setComment(comment);
        // Включить сжатие
        zos.setMethod(ZipOutputStream.DEFLATED);
        // Уровень сжатия самый сильный, но занимает немного больше времени
        zos.setLevel(Deflater.BEST_COMPRESSION);

        File srcFile = new File(src);

        if (!srcFile.exists() || (srcFile.isDirectory() && srcFile.list().length == 0)) {
            throw new FileNotFoundException(
                    "File must exist and  ZIP file must have at least one entry.");
        }
        // Получить родительский каталог, в котором находится источник сжатия
        src = src.replaceAll("\\\\", "/");
        String prefixDir = null;
        if (srcFile.isFile()) {
            prefixDir = src.substring(0, src.lastIndexOf("/") + 1);
        } else {
            prefixDir = (src.replaceAll("/$", "") + "/");
        }

        // если не корневой каталог
        if (prefixDir.indexOf("/") != (prefixDir.length() - 1) && isCreateSrcDir) {
            prefixDir = prefixDir.replaceAll("[^/]+/$", "");
        }

        // Запускаем сжатие
        writeRecursive(zos, out, srcFile, prefixDir);

        out.close();
        // Примечание: контрольная сумма готовится после закрытия потока и должна использоваться после закрытия потока
        System.out.println("Checksum: " + csum.getChecksum().getValue());
        BufferedInputStream bi;
    }

    */
/**
     * Используйте org.apache.tools.zip.ZipFile, чтобы распаковать файл.
     * Использование java.util.zip.ZipFile является новым, но есть больше, чтобы установить метод кодирования
     * Интерфейс.
     *
     * Обратите внимание, что apache не предоставляет класс ZipInputStream, поэтому вы можете использовать только тот ZipFile, который он предоставляет
     * Для чтения сжатых файлов.
     * @param путь к архиву
     * @param depressDir путь распаковки
     * @throws IOException
     * @throws FileNotFoundException
     * @throws ZipException
     *//*

    public static void readByApacheZipFile(String archive, String decompressDir)
            throws IOException, FileNotFoundException, ZipException {
        BufferedInputStream bi;

        ZipFile zf = new ZipFile (архив, "GBK"); // Поддержка китайского

        Enumeration e = zf.getEntries();
        while (e.hasMoreElements()) {
            ZipEntry ze2 = (ZipEntry) e.nextElement();
            String entryName = ze2.getName();
            String path = decompressDir + "/" + entryName;
            if (ze2.isDirectory()) {
                System.out.println («Создание разархивированного каталога-» + entryName);
                File decompressDirFile = new File(path);
                if (!decompressDirFile.exists()) {
                    decompressDirFile.mkdirs();
                }
            } else {
                System.out.println («Создание разархивированного файла» + entryName);
                String fileDir = path.substring(0, path.lastIndexOf("/"));
                File fileDirFile = new File(fileDir);
                if (!fileDirFile.exists()) {
                    fileDirFile.mkdirs();
                }
                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(
                        decompressDir + "/" + entryName));

                bi = new BufferedInputStream(zf.getInputStream(ze2));
                byte[] readContent = new byte[1024];
                int readCount = bi.read(readContent);
                while (readCount != -1) {
                    bos.write(readContent, 0, readCount);
                    readCount = bi.read(readContent);
                }
                bos.close();
            }
        }
        zf.close();
    }

    */
/**
     * Используйте ZipInputStream класс в Java API для распаковки файлов, но если используется сжатие
     * org.apache.tools.zip.ZipOutputStream, а не в библиотеке классов Java
     * java.util.zip.ZipOutputStream, этот метод не может быть использован, потому что сторона кодирования
     * Из-за несовместимых стилей во время выполнения будут выброшены следующие исключения:
     * java.lang.IllegalArgumentException
     * at java.util.zip.ZipInputStream.getUTF8String(ZipInputStream.java:290)
     *
     * Конечно, если сжатый пакет использует java.util.zip.ZipOutputStream библиотеки классов java
     * Сжатие не является проблемой, но оно не поддерживает китайский
     *
     * @param путь к архиву
     * @param depressDir путь распаковки
     * @throws FileNotFoundException
     * @throws IOException
     *//*

    public static void readByZipInputStream(String archive, String decompressDir)
            throws FileNotFoundException, IOException {
        BufferedInputStream bi;
        // ---- распаковываем файл (распаковка ZIP-файла, по сути, читает данные из входного потока):
        System.out.println («Начать чтение сжатого файла»);

        FileInputStream fi = new FileInputStream(archive);
        CheckedInputStream csumi = new CheckedInputStream(fi, new CRC32());
        ZipInputStream in2 = new ZipInputStream(csumi);
        bi = new BufferedInputStream(in2);
        java.util.zip.ZipEntry ze; // Запись сжатого файла
        // проходим записи файла в сжатом пакете
        while ((ze = in2.getNextEntry()) != null) {
            String entryName = ze.getName();
            if (ze.isDirectory()) {
                System.out.println («Создание разархивированного каталога-» + entryName);
                File decompressDirFile = new File(decompressDir + "/" + entryName);
                if (!decompressDirFile.exists()) {
                    decompressDirFile.mkdirs();
                }
            } else {
                System.out.println («Создание разархивированного файла» + entryName);
                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(
                        decompressDir + "/" + entryName));
                byte[] buffer = new byte[1024];
                int readCount = bi.read(buffer);

                while (readCount != -1) {
                    bos.write(buffer, 0, readCount);
                    readCount = bi.read(buffer);
                }
                bos.close();
            }
        }
        bi.close();
        System.out.println("Checksum: " + csumi.getChecksum().getValue());
    }

    */
/**
     * Рекурсивное сжатие
     *
     * Используйте для сжатия класс org.apache.tools.zip.ZipOutputStream, его преимущество в том, что он поддерживает китайские пути.
     * Файл java.util.zip.ZipOutputStream в библиотеке классов Java искажен при сжатии китайских имен файлов.
     * Использование этого класса в Apache и использование в библиотеке классов Java является новым, можно установить только метод кодирования.
     *
     * @param zos
     * @param bo
     * @param srcFile
     * @param prefixDir
     * @throws IOException
     * @throws FileNotFoundException
     *//*

    private static void writeRecursive(ZipOutputStream zos, BufferedOutputStream bo,
                                       File srcFile, String prefixDir) throws IOException, FileNotFoundException {
        ZipEntry zipEntry;

        String filePath = srcFile.getAbsolutePath().replaceAll("\\\\", "/").replaceAll(
                "//", "/");
        if (srcFile.isDirectory()) {
            filePath = filePath.replaceAll("/$", "") + "/";
        }
        String entryName = filePath.replace(prefixDir, "").replaceAll("/$", "");
        if (srcFile.isDirectory()) {
            if (!"".equals(entryName)) {
                System.out.println («Создание каталога-» + srcFile.getAbsolutePath ()
                        + "  entryName=" + entryName);

                // Если это каталог, вам нужно добавить /
                zipEntry = new ZipEntry(entryName + "/");
                zos.putNextEntry(zipEntry);
            }

            File srcFiles[] = srcFile.listFiles();
            for (int i = 0; i < srcFiles.length; i++) {
                writeRecursive(zos, bo, srcFiles[i], prefixDir);
            }
        } else {
            System.out.println ("Запись файла-" + srcFile.getAbsolutePath () + "entryName ="
                    + entryName);
            BufferedInputStream bi = new BufferedInputStream(new FileInputStream(srcFile));

            // начинаем записывать новую запись в файл ZIP и помещаем поток в начало данных записи
            zipEntry = new ZipEntry(entryName);
            zos.putNextEntry(zipEntry);
            byte[] buffer = new byte[1024];
            int readCount = bi.read(buffer);

            while (readCount != -1) {
                bo.write(buffer, 0, readCount);
                readCount = bi.read(buffer);
            }
            // Обратите внимание, что при использовании буферизованного потока для записи сжатого файла вы должны обновить его после условия, нет
            // Конечно, некоторый контент будет храниться в следующих записях
            bo.flush();
            // Закрыть после прочтения файла
            bi.close();
        }
    }
}
*/
